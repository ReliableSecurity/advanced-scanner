#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
AKUMA's Ultimate Phishing Log Analyzer
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ª–æ–≥–æ–≤ —Ñ–∏—à–∏–Ω–≥–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á—ë—Ç–∞ –¥–ª—è —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞

–ê–≤—Ç–æ—Ä: AKUMA (–ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π —Ö–∞–∫–µ—Ä)
–í–µ—Ä—Å–∏—è: 1.0 "–ö–∞–∫ –≤ —Å—Ç–∞—Ä—ã–µ –¥–æ–±—Ä—ã–µ –≤—Ä–µ–º–µ–Ω–∞"
"""

import csv
import json
import re
from datetime import datetime
from collections import defaultdict, Counter
from urllib.parse import unquote
import ipaddress
import requests
from time import sleep

class PhishingLogAnalyzer:
    def __init__(self, csv_file_path):
        self.csv_file_path = csv_file_path
        self.click_data = []
        self.creds_data = []
        self.unique_ips = set()
        self.user_agents = []
        self.click_times = []
        self.creds_times = []
        self.payload_data = []
        
    def parse_csv(self):
        """–ü–∞—Ä—Å–∏–Ω–≥ CSV —Ñ–∞–π–ª–∞ —Å –ª–æ–≥–∞–º–∏ —Ñ–∏—à–∏–Ω–≥–∞"""
        print(f"üîç –ü–∞—Ä—Å–∏–º –ª–æ–≥–∏ –∏–∑ —Ñ–∞–π–ª–∞: {self.csv_file_path}")
        
        try:
            with open(self.csv_file_path, 'r', encoding='utf-8') as file:
                # –£–±–∏—Ä–∞–µ–º –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–æ–∫ –≤ –Ω–∞—á–∞–ª–µ
                content = file.read().replace('\r', '')
                lines = content.strip().split('\n')
                
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                header_line = lines[0].split('|', 1)[1] if '|' in lines[0] else lines[0]
                
                for i, line in enumerate(lines[1:], 2):
                    try:
                        # –£–¥–∞–ª—è–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ –≤ –Ω–∞—á–∞–ª–µ
                        if '|' in line:
                            clean_line = line.split('|', 1)[1]
                        else:
                            clean_line = line
                            
                        # –ü–∞—Ä—Å–∏–º CSV —Å—Ç—Ä–æ–∫—É
                        parts = self._parse_csv_line(clean_line)
                        if len(parts) >= 5:
                            campaign_id, email, timestamp, message, details = parts[:5]
                            
                            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–ª–∏–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫—É –¥–∞–Ω–Ω—ã—Ö
                            if message.strip() == "Clicked Link" and details:
                                parsed_details = self._parse_details(details)
                                if parsed_details:
                                    record = {
                                        'campaign_id': campaign_id,
                                        'email': email,
                                        'timestamp': timestamp,
                                        'message': message,
                                        'ip_address': parsed_details.get('ip_address'),
                                        'user_agent': parsed_details.get('user_agent'),
                                        'payload': parsed_details.get('payload')
                                    }
                                    self.click_data.append(record)
                                    
                                    if record['ip_address']:
                                        self.unique_ips.add(record['ip_address'])
                                    if record['user_agent']:
                                        self.user_agents.append(record['user_agent'])
                                    if record['timestamp']:
                                        self.click_times.append(timestamp)
                            
                            elif message.strip() == "Submitted Data" and details:
                                parsed_details = self._parse_details(details)
                                if parsed_details:
                                    record = {
                                        'campaign_id': campaign_id,
                                        'email': email,
                                        'timestamp': timestamp,
                                        'message': message,
                                        'ip_address': parsed_details.get('ip_address'),
                                        'user_agent': parsed_details.get('user_agent'),
                                        'payload': parsed_details.get('payload'),
                                        'submitted_email': parsed_details.get('submitted_email'),
                                        'submitted_password': parsed_details.get('submitted_password')
                                    }
                                    self.creds_data.append(record)
                                    
                                    if record['ip_address']:
                                        self.unique_ips.add(record['ip_address'])
                                    if record['user_agent']:
                                        self.user_agents.append(record['user_agent'])
                                    if record['timestamp']:
                                        self.creds_times.append(timestamp)
                                        
                    except Exception as e:
                        print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–æ–∫–∏ {i}: {e}")
                        continue
                        
        except Exception as e:
            print(f"üí• –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
            return False
            
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–æ {len(self.click_data)} –∑–∞–ø–∏—Å–µ–π –æ –∫–ª–∏–∫–∞—Ö")
        print(f"üéØ –£—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–æ {len(self.creds_data)} –∑–∞–ø–∏—Å–µ–π —Å –∫—Ä–µ–¥–∞–º–∏")
        return True
    
    def _parse_csv_line(self, line):
        """–ü–∞—Ä—Å–∏–Ω–≥ CSV —Å—Ç—Ä–æ–∫–∏ —Å —É—á—ë—Ç–æ–º escape —Å–∏–º–≤–æ–ª–æ–≤"""
        parts = []
        current_part = ""
        in_quotes = False
        i = 0
        
        while i < len(line):
            char = line[i]
            
            if char == '"' and (i == 0 or line[i-1] != '\\'):
                in_quotes = not in_quotes
            elif char == ',' and not in_quotes:
                parts.append(current_part.strip())
                current_part = ""
                i += 1
                continue
            
            current_part += char
            i += 1
            
        if current_part:
            parts.append(current_part.strip())
            
        return parts
    
    def _parse_details(self, details_str):
        """–ü–∞—Ä—Å–∏–Ω–≥ JSON –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø–æ–ª—è details"""
        try:
            # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ escape —Å–∏–º–≤–æ–ª—ã –∏ –∫–∞–≤—ã—á–∫–∏
            cleaned = details_str.strip('"')
            cleaned = cleaned.replace('""', '"')
            
            # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON
            data = json.loads(cleaned)
            
            browser_info = data.get('browser', {})
            payload_info = data.get('payload', {})
            
            result = {
                'ip_address': browser_info.get('address'),
                'user_agent': browser_info.get('user-agent'),
                'payload': payload_info
            }
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫—Ä–µ–¥—ã –µ—Å–ª–∏ –µ—Å—Ç—å
            if 'email' in payload_info and payload_info['email']:
                result['submitted_email'] = payload_info['email'][0] if isinstance(payload_info['email'], list) else payload_info['email']
            if 'password' in payload_info and payload_info['password']:
                result['submitted_password'] = payload_info['password'][0] if isinstance(payload_info['password'], list) else payload_info['password']
                
            return result
        except Exception as e:
            # –ï—Å–ª–∏ JSON –Ω–µ –ø–∞—Ä—Å–∏—Ç—Å—è, –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ —Ä–µ–≥—É–ª—è—Ä–∫–æ–π
            ip_match = re.search(r'"address":"([^"]+)"', details_str)
            ua_match = re.search(r'"user-agent":"([^"]+)"', details_str)
            email_match = re.search(r'"email":\["([^"]+)"\]', details_str)
            password_match = re.search(r'"password":\["([^"]+)"\]', details_str)
            
            result = {
                'ip_address': ip_match.group(1) if ip_match else None,
                'user_agent': ua_match.group(1) if ua_match else None,
                'payload': {}
            }
            
            if email_match:
                result['submitted_email'] = email_match.group(1)
            if password_match:
                result['submitted_password'] = password_match.group(1)
                
            return result
    
    def analyze_time_patterns(self):
        """–ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –∫–ª–∏–∫–æ–≤"""
        print("üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã...")
        
        hourly_stats = defaultdict(int)
        daily_stats = defaultdict(int)
        
        for timestamp in self.click_times:
            try:
                dt = datetime.fromisoformat(timestamp.replace('Z', '+00:00'))
                hour = dt.hour
                day = dt.strftime('%Y-%m-%d')
                
                hourly_stats[hour] += 1
                daily_stats[day] += 1
            except:
                continue
                
        return {
            'hourly_distribution': dict(hourly_stats),
            'daily_distribution': dict(daily_stats),
            'total_clicks': len(self.click_times),
            'peak_hour': max(hourly_stats.items(), key=lambda x: x[1]) if hourly_stats else None,
            'peak_day': max(daily_stats.items(), key=lambda x: x[1]) if daily_stats else None
        }
    
    def analyze_ip_addresses(self):
        """–ê–Ω–∞–ª–∏–∑ IP –∞–¥—Ä–µ—Å–æ–≤"""
        print("üåç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º IP –∞–¥—Ä–µ—Å–∞...")
        
        ip_stats = Counter()
        network_stats = defaultdict(int)
        suspicious_ips = []
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–∫–æ–≤ –∏ –∫—Ä–µ–¥–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ IP
        all_data = self.click_data + self.creds_data
        
        for record in all_data:
            if record['ip_address']:
                ip = record['ip_address']
                ip_stats[ip] += 1
                
                try:
                    ip_obj = ipaddress.ip_address(ip)
                    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ /24 —Å–µ—Ç—è–º
                    if ip_obj.version == 4:
                        network = str(ipaddress.IPv4Network(f"{ip}/24", strict=False))
                        network_stats[network] += 1
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã
                        if (ip.startswith('209.222.82.') or  # –ú–Ω–æ–≥–æ –∫–ª–∏–∫–æ–≤ —Å –æ–¥–Ω–æ–π —Å–µ—Ç–∏
                            ip.startswith('172.253.') or      # Google ranges
                            ip.startswith('35.') or           # Cloud providers
                            ip.startswith('34.')):
                            suspicious_ips.append(ip)
                            
                except:
                    pass
        
        return {
            'unique_ips': len(self.unique_ips),
            'top_ips': dict(ip_stats.most_common(10)),
            'suspicious_ips': list(set(suspicious_ips)),
            'network_distribution': dict(network_stats),
            'repeat_clickers': {ip: count for ip, count in ip_stats.items() if count > 1}
        }
    
    def analyze_user_agents(self):
        """–ê–Ω–∞–ª–∏–∑ User-Agent —Å—Ç—Ä–æ–∫"""
        print("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º User-Agent —Å—Ç—Ä–æ–∫–∏...")
        
        ua_counter = Counter(self.user_agents)
        browsers = defaultdict(int)
        os_counter = defaultdict(int)
        suspicious_ua = []
        
        for ua in self.user_agents:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±—Ä–∞—É–∑–µ—Ä
            if 'Chrome' in ua:
                browsers['Chrome'] += 1
            elif 'Firefox' in ua:
                browsers['Firefox'] += 1
            elif 'Safari' in ua and 'Chrome' not in ua:
                browsers['Safari'] += 1
            elif 'Edge' in ua:
                browsers['Edge'] += 1
            elif 'MSIE' in ua or 'Trident' in ua:
                browsers['Internet Explorer'] += 1
            else:
                browsers['Other'] += 1
                
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –û–°
            if 'Windows NT' in ua:
                os_counter['Windows'] += 1
            elif 'Macintosh' in ua or 'Mac OS X' in ua:
                os_counter['macOS'] += 1
            elif 'Linux' in ua:
                os_counter['Linux'] += 1
            elif 'Android' in ua:
                os_counter['Android'] += 1
            elif 'iPhone' in ua or 'iOS' in ua:
                os_counter['iOS'] += 1
            else:
                os_counter['Other'] += 1
                
            # –ò—â–µ–º –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ UA
            if (any(word in ua.lower() for word in ['bot', 'crawler', 'spider', 'scraper']) or
                'AntiSpam-Agent' in ua or
                'AppEngine-Google' in ua or
                ua.count('Mozilla') > 1):
                suspicious_ua.append(ua)
        
        return {
            'total_user_agents': len(self.user_agents),
            'unique_user_agents': len(ua_counter),
            'top_user_agents': dict(ua_counter.most_common(5)),
            'browser_distribution': dict(browsers),
            'os_distribution': dict(os_counter),
            'suspicious_user_agents': list(set(suspicious_ua))
        }
    
    def analyze_credentials(self):
        """–ê–Ω–∞–ª–∏–∑ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        print("üéØ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ...")
        
        creds_by_ip = defaultdict(list)
        email_domains = Counter()
        password_patterns = {
            'weak': 0,      # –ø—Ä–æ—Å—Ç—ã–µ –ø–∞—Ä–æ–ª–∏
            'medium': 0,    # —Å—Ä–µ–¥–Ω–∏–µ
            'strong': 0     # —Å–ª–æ–∂–Ω—ã–µ
        }
        
        for record in self.creds_data:
            ip = record.get('ip_address', 'Unknown')
            email = record.get('submitted_email', '')
            password = record.get('submitted_password', '')
            
            creds_by_ip[ip].append({
                'email': email,
                'password': password,
                'timestamp': record.get('timestamp', ''),
                'user_agent': record.get('user_agent', '')
            })
            
            # –ê–Ω–∞–ª–∏–∑ –¥–æ–º–µ–Ω–æ–≤
            if '@' in email:
                domain = email.split('@')[1].lower()
                email_domains[domain] += 1
            
            # –ê–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –ø–∞—Ä–æ–ª–µ–π
            if password:
                if len(password) < 6 or password.lower() in ['password', '123456', 'qwerty']:
                    password_patterns['weak'] += 1
                elif len(password) < 10 and not any(c.isupper() for c in password):
                    password_patterns['medium'] += 1
                else:
                    password_patterns['strong'] += 1
        
        return {
            'total_credentials': len(self.creds_data),
            'credentials_by_ip': dict(creds_by_ip),
            'email_domains': dict(email_domains.most_common(10)),
            'password_patterns': password_patterns,
            'unique_emails': len(set([r.get('submitted_email', '') for r in self.creds_data if r.get('submitted_email')])),
            'submission_times': self.creds_times
        }
    
    def get_ip_geolocation(self, ip_address):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ IP –∞–¥—Ä–µ—Å–∞ —á–µ—Ä–µ–∑ ip-api.com"""
        try:
            response = requests.get(f"http://ip-api.com/json/{ip_address}", timeout=5)
            if response.status_code == 200:
                data = response.json()
                if data['status'] == 'success':
                    return {
                        'country': data.get('country', 'Unknown'),
                        'city': data.get('city', 'Unknown'),
                        'region': data.get('regionName', 'Unknown'),
                        'isp': data.get('isp', 'Unknown'),
                        'org': data.get('org', 'Unknown'),
                        'lat': data.get('lat', 0),
                        'lon': data.get('lon', 0)
                    }
        except Exception:
            pass
        
        return {
            'country': 'Unknown',
            'city': 'Unknown', 
            'region': 'Unknown',
            'isp': 'Unknown',
            'org': 'Unknown',
            'lat': 0,
            'lon': 0
        }
    
    def analyze_geolocation(self):
        """–ê–Ω–∞–ª–∏–∑ –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è"""
        print("üó∫Ô∏è  –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ...")
        
        country_stats = Counter()
        city_stats = Counter()
        isp_stats = Counter()
        
        creds_locations = []
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API
        unique_ips = list(self.unique_ips)[:50]  # –ë–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ —Ç–æ–ø-50 IP
        
        for i, ip in enumerate(unique_ips):
            if i > 0 and i % 10 == 0:
                print(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {i}/{len(unique_ips)} IP –∞–¥—Ä–µ—Å–æ–≤...")
                sleep(1)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                
            location = self.get_ip_geolocation(ip)
            country_stats[location['country']] += 1
            city_stats[f"{location['city']}, {location['country']}"] += 1
            isp_stats[location['isp']] += 1
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∫—Ä–µ–¥—ã —Å —ç—Ç–æ–≥–æ IP
            ip_creds = [record for record in self.creds_data if record.get('ip_address') == ip]
            if ip_creds:
                for cred in ip_creds:
                    creds_locations.append({
                        'ip': ip,
                        'location': location,
                        'email': cred.get('submitted_email', ''),
                        'timestamp': cred.get('timestamp', '')
                    })
        
        return {
            'country_distribution': dict(country_stats.most_common(10)),
            'city_distribution': dict(city_stats.most_common(10)),
            'isp_distribution': dict(isp_stats.most_common(10)),
            'credentials_locations': creds_locations
        }
    
    def generate_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á—ë—Ç–∞"""
        print("üìã –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á—ë—Ç...")
        
        time_analysis = self.analyze_time_patterns()
        ip_analysis = self.analyze_ip_addresses()
        ua_analysis = self.analyze_user_agents()
        creds_analysis = self.analyze_credentials()
        geo_analysis = self.analyze_geolocation() if len(self.creds_data) > 0 else None
        
        report = f"""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                   üéØ –û–¢–ß–Å–¢ –ü–û –§–ò–®–ò–ù–ì-–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Æ              ‚ïë
‚ïë                     (–∞–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤)                      ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
‚Ä¢ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–∫–æ–≤: {time_analysis['total_clicks']}
‚Ä¢ –ü–æ–ª—É—á–µ–Ω–Ω—ã—Ö —É—á—ë—Ç–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: {creds_analysis['total_credentials']}
‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö IP –∞–¥—Ä–µ—Å–æ–≤: {ip_analysis['unique_ips']}
‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö User-Agent: {ua_analysis['unique_user_agents']}
‚Ä¢ Email —Ü–µ–ª—å: dmitriyvisotskiydr15061991@gmail.com

‚è∞ –í–†–ï–ú–ï–ù–ù–û–ô –ê–ù–ê–õ–ò–ó:
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
‚Ä¢ –ü–µ—Ä–∏–æ–¥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {min(time_analysis['daily_distribution'].keys()) if time_analysis['daily_distribution'] else 'N/A'} - {max(time_analysis['daily_distribution'].keys()) if time_analysis['daily_distribution'] else 'N/A'}
‚Ä¢ –ü–∏–∫–æ–≤—ã–π —á–∞—Å: {time_analysis['peak_hour'][0] if time_analysis['peak_hour'] else 'N/A'}:00 ({time_analysis['peak_hour'][1] if time_analysis['peak_hour'] else 0} –∫–ª–∏–∫–æ–≤)
‚Ä¢ –°–∞–º—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π –¥–µ–Ω—å: {time_analysis['peak_day'][0] if time_analysis['peak_day'] else 'N/A'} ({time_analysis['peak_day'][1] if time_analysis['peak_day'] else 0} –∫–ª–∏–∫–æ–≤)

üåç –ê–ù–ê–õ–ò–ó IP –ê–î–†–ï–°–û–í:
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
‚Ä¢ –¢–æ–ø-5 IP –∞–¥—Ä–µ—Å–æ–≤ –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:"""
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ø IP
        for i, (ip, count) in enumerate(list(ip_analysis['top_ips'].items())[:5], 1):
            report += f"\n  {i}. {ip} - {count} –∫–ª–∏–∫–æ–≤"
        
        report += f"""

‚Ä¢ –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ IP (–æ–±–ª–∞—á–Ω—ã–µ/–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ): {len(ip_analysis['suspicious_ips'])}
‚Ä¢ IP —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –∫–ª–∏–∫–∞–º–∏: {len(ip_analysis['repeat_clickers'])}

üîç –ê–ù–ê–õ–ò–ó –ë–†–ê–£–ó–ï–†–û–í:
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"""

        # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±—Ä–∞—É–∑–µ—Ä–æ–≤
        for browser, count in sorted(ua_analysis['browser_distribution'].items(), key=lambda x: x[1], reverse=True):
            percentage = (count / ua_analysis['total_user_agents']) * 100
            report += f"\n‚Ä¢ {browser}: {count} ({percentage:.1f}%)"

        report += f"""

üñ•Ô∏è  –ê–ù–ê–õ–ò–ó –û–ü–ï–†–ê–¶–ò–û–ù–ù–´–• –°–ò–°–¢–ï–ú:
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"""

        # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –û–°
        for os_name, count in sorted(ua_analysis['os_distribution'].items(), key=lambda x: x[1], reverse=True):
            percentage = (count / ua_analysis['total_user_agents']) * 100
            report += f"\n‚Ä¢ {os_name}: {count} ({percentage:.1f}%)"

        # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∞–ª–∏–∑ —É—á—ë—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if creds_analysis['total_credentials'] > 0:
            report += f"""

üéØ –ê–ù–ê–õ–ò–ó –ü–û–õ–£–ß–ï–ù–ù–´–• –£–ß–Å–¢–ù–´–• –î–ê–ù–ù–´–•:
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ —É—á—ë—Ç–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: {creds_analysis['total_credentials']}
‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö email –∞–¥—Ä–µ—Å–æ–≤: {creds_analysis['unique_emails']}

üìß –¢–û–ü EMAIL –î–û–ú–ï–ù–û–í:"""
            for domain, count in list(creds_analysis['email_domains'].items())[:5]:
                report += f"\n‚Ä¢ {domain}: {count} –∑–∞–ø–∏—Å–µ–π"
            
            report += f"""

üîê –ê–ù–ê–õ–ò–ó –ü–ê–†–û–õ–ï–ô:
‚Ä¢ –°–ª–∞–±—ã–µ –ø–∞—Ä–æ–ª–∏: {creds_analysis['password_patterns']['weak']} ({(creds_analysis['password_patterns']['weak']/max(1, creds_analysis['total_credentials'])*100):.1f}%)
‚Ä¢ –°—Ä–µ–¥–Ω–∏–µ –ø–∞—Ä–æ–ª–∏: {creds_analysis['password_patterns']['medium']} ({(creds_analysis['password_patterns']['medium']/max(1, creds_analysis['total_credentials'])*100):.1f}%)
‚Ä¢ –°–ª–æ–∂–Ω—ã–µ –ø–∞—Ä–æ–ª–∏: {creds_analysis['password_patterns']['strong']} ({(creds_analysis['password_patterns']['strong']/max(1, creds_analysis['total_credentials'])*100):.1f}%)

üíÄ –ü–û–õ–ù–´–ô –°–ü–ò–°–û–ö –£–ö–†–ê–î–ï–ù–ù–´–• –£–ß–Å–¢–ù–´–• –î–ê–ù–ù–´–•:
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"""
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —É–∫—Ä–∞–¥–µ–Ω–Ω—ã–µ –∫—Ä–µ–¥—ã
            for i, record in enumerate(self.creds_data, 1):
                email = record.get('submitted_email', 'N/A')
                password = record.get('submitted_password', 'N/A')
                ip = record.get('ip_address', 'N/A')
                timestamp = record.get('timestamp', 'N/A')
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
                try:
                    dt = datetime.fromisoformat(timestamp.replace('Z', '+00:00'))
                    formatted_time = dt.strftime('%Y-%m-%d %H:%M:%S')
                except:
                    formatted_time = timestamp
                
                report += f"\n{i:2d}. Email: {email}"
                report += f"\n    Password: {password}"
                report += f"\n    IP: {ip}"
                report += f"\n    –í—Ä–µ–º—è: {formatted_time}"
                report += f"\n    {'‚îÄ' * 50}"

        # –î–æ–±–∞–≤–ª—è–µ–º –≥–µ–æ–∞–Ω–∞–ª–∏–∑
        if geo_analysis and geo_analysis['credentials_locations']:
            report += f"""

üó∫Ô∏è  –ì–ï–û–ì–†–ê–§–ò–Ø –ü–û–õ–£–ß–ï–ù–ù–´–• –î–ê–ù–ù–´–•:
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
‚Ä¢ –°—Ç—Ä–∞–Ω—ã (—Ç–æ–ø-5):"""
            for country, count in list(geo_analysis['country_distribution'].items())[:5]:
                report += f"\n  - {country}: {count} IP –∞–¥—Ä–µ—Å–æ–≤"
                
            if geo_analysis['credentials_locations']:
                report += f"""

üî• –ö–†–ò–¢–ò–ß–ù–û! –£—á—ë—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö –ª–æ–∫–∞—Ü–∏–π:"""
                for cred_location in geo_analysis['credentials_locations'][:5]:
                    location = cred_location['location']
                    report += f"\n‚Ä¢ {cred_location['email']} - {location['city']}, {location['country']} (IP: {cred_location['ip']})"

        report += f"""

üö® –ü–û–¢–ï–ù–¶–ò–ê–õ–¨–ù–´–ï –£–ì–†–û–ó–´ –ò –ê–ù–û–ú–ê–õ–ò–ò:
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã: {len(ua_analysis['suspicious_user_agents'])} —Ç–∏–ø–æ–≤
‚Ä¢ –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫–ª–∏–∫–∏ —Å –æ–¥–Ω–æ–≥–æ IP: {len([ip for ip, count in ip_analysis['repeat_clickers'].items() if count > 10])} –∞–¥—Ä–µ—Å–æ–≤
‚Ä¢ –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ User-Agent: {len(set(ua_analysis['suspicious_user_agents']))}

üìã –í–´–í–û–î–´ –ò –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
"""

        # –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã–≤–æ–¥—ã
        if time_analysis['total_clicks'] > 200:
            report += "‚ö†Ô∏è  –ö–†–ò–¢–ò–ß–ù–û: –û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –º–æ–∂–µ—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ\n"
        
        if len(ip_analysis['suspicious_ips']) > 50:
            report += "‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∏–∑ –æ–±–ª–∞—á–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤\n"
            
        if len([count for count in ip_analysis['repeat_clickers'].values() if count > 20]) > 5:
            report += "üî• –ö–†–ò–¢–ò–ß–ù–û: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã IP —Å –∞–Ω–æ–º–∞–ª—å–Ω–æ –≤—ã—Å–æ–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é (>20 –∫–ª–∏–∫–æ–≤)\n"
            
        if len(ua_analysis['suspicious_user_agents']) > 0:
            report += "ü§ñ –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–ò–Ø: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –±–æ—Ç—ã –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∫–∞–Ω–µ—Ä—ã\n"
        
        if creds_analysis['total_credentials'] > 0:
            report += f"üíÄ –ö–†–ò–¢–ò–ß–ù–û: –ü–æ–ª—É—á–µ–Ω–æ {creds_analysis['total_credentials']} —É—á—ë—Ç–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π!\n"
            
        if creds_analysis['password_patterns']['weak'] > creds_analysis['total_credentials'] * 0.5:
            report += "‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ë–æ–ª–µ–µ 50% –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –ø–∞—Ä–æ–ª–µ–π —è–≤–ª—è—é—Ç—Å—è —Å–ª–∞–±—ã–º–∏\n"

        recommendations = [
            "1. –í–Ω–µ–¥—Ä–∏—Ç—å rate limiting –Ω–∞ –≤–µ–±-—Å–µ—Ä–≤–∏—Å–∞—Ö",
            "2. –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ IP –¥–∏–∞–ø–∞–∑–æ–Ω—ã: 209.222.82.0/24",
            "3. –£—Å–∏–ª–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
            "4. –ü—Ä–æ–≤–µ—Å—Ç–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø–æ —Ñ–∏—à–∏–Ω–≥—É",
            "5. –†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ CAPTCHA –¥–ª—è –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞"
        ]
        
        if creds_analysis['total_credentials'] > 0:
            recommendations.extend([
                "6. üî• –°–†–û–ß–ù–û: –£–≤–µ–¥–æ–º–∏—Ç—å –∑–∞—Ç—Ä–æ–Ω—É—Ç—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ –∫–æ–º–ø—Ä–æ–º–∏—Ç–∞—Ü–∏–∏",
                "7. üî• –°–†–û–ß–ù–û: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª–∏ –¥–ª—è —Å–∫–æ–º–ø—Ä–æ–º–µ—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤",
                "8. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø—ã —Å–∫–æ–º–ø—Ä–æ–º–µ—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤",
                "9. –£—Å–∏–ª–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"
            ])
        
        report += f"""
üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò:
" + "\n".join(recommendations) + f"

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
–û—Ç—á—ë—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª: AKUMA's Phishing Analyzer v1.0
"–î–æ–≤–µ—Ä—è–π, –Ω–æ –ø—Ä–æ–≤–µ—Ä—è–π... –æ—Å–æ–±–µ–Ω–Ω–æ —Ñ–∏—à–∏–Ω–≥–æ–≤—ã–µ –ø–∏—Å—å–º–∞!" üòà
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
"""
        
        return report
    
    def save_detailed_data(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        detailed_data = {
            'summary': {
                'total_clicks': len(self.click_data),
                'total_credentials': len(self.creds_data),
                'unique_ips': len(self.unique_ips),
                'analysis_date': datetime.now().isoformat()
            },
            'time_analysis': self.analyze_time_patterns(),
            'ip_analysis': self.analyze_ip_addresses(),
            'user_agent_analysis': self.analyze_user_agents(),
            'credentials_analysis': self.analyze_credentials(),
            'geolocation_analysis': self.analyze_geolocation() if len(self.creds_data) > 0 else None,
            'raw_click_data_sample': self.click_data[:5],
            'raw_creds_data_sample': [{
                'ip': record.get('ip_address', ''),
                'email': record.get('submitted_email', ''),
                'timestamp': record.get('timestamp', ''),
                'user_agent': record.get('user_agent', '')[:100] + '...' if len(record.get('user_agent', '')) > 100 else record.get('user_agent', '')
            } for record in self.creds_data[:10]]  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–µ–¥—ã –±–µ–∑ –ø–∞—Ä–æ–ª–µ–π –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        }
        
        output_file = '/home/akuma/Desktop/phishing_analysis_detailed.json'
        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump(detailed_data, f, ensure_ascii=False, indent=2)
        
        print(f"üíæ –î–µ—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {output_file}")
        return output_file

def main():
    print("üéØ AKUMA's Phishing Log Analyzer v1.0")
    print("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")
    
    csv_file = "/home/akuma/Desktop/projects/atacking_google.com-2 - Events.csv"
    analyzer = PhishingLogAnalyzer(csv_file)
    
    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
    if not analyzer.parse_csv():
        print("üí• –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö!")
        return
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç
    report = analyzer.generate_report()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á—ë—Ç
    report_file = '/home/akuma/Desktop/phishing_report.txt'
    with open(report_file, 'w', encoding='utf-8') as f:
        f.write(report)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    analyzer.save_detailed_data()
    
    print(f"üìã –û—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤: {report_file}")
    print("\n" + "‚ïê" * 60)
    print("–ü–†–ï–í–¨–Æ –û–¢–ß–Å–¢–ê:")
    print("‚ïê" * 60)
    print(report)

if __name__ == "__main__":
    main()
