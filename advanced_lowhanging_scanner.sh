#!/bin/bash

# ========================================================================
# AKUMA'S ADVANCED LOW-HANGING FRUIT SCANNER v2.0
# "–ï—Å–ª–∏ —Ç–≤–æ—è –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –Ω–µ –ø–ª–∞—á–µ—Ç –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞ - —Ç—ã –¥–µ–ª–∞–µ—à—å —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫"
# ========================================================================

set -eu

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
declare -g SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
declare -g CONFIG_FILE="${SCRIPT_DIR}/scanner_config.conf"
declare -g WORK_DIR="${HOME}/lowhanging_results"
declare -g OUTPUT_DIR="${WORK_DIR}/scan_$(date +%Y%m%d_%H%M%S)"
declare -g LOG_FILE="${OUTPUT_DIR}/scanner.log"
declare -g VULNERABILITY_DB="${OUTPUT_DIR}/vulnerabilities.db"

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
declare -g MAX_PARALLEL=20
declare -g TIMEOUT_PER_HOST=300
declare -g NMAP_THREADS=100
declare -g DEBUG_MODE=false
declare -g AUTHENTICATED_SCAN=false
declare -g USERNAME=""
declare -g PASSWORD=""
declare -g DOMAIN=""

# –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å –∏ –Ω–∞–¥—ë–∂–Ω–æ—Å—Ç—å
declare -g MAX_SUBNETS_PER_BATCH=10
declare -g RESUME_SCAN=false
declare -g CHECKPOINT_INTERVAL=100
declare -g AUTO_RETRY_FAILED=true
declare -g MAX_RETRY_ATTEMPTS=3

# –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
declare -gr RED='\033[0;31m'
declare -gr GREEN='\033[0;32m'
declare -gr YELLOW='\033[1;33m'
declare -gr BLUE='\033[0;34m'
declare -gr PURPLE='\033[0;35m'
declare -gr CYAN='\033[0;36m'
declare -gr WHITE='\033[1;37m'
declare -gr NC='\033[0m' # No Color
declare -gr BOLD='\033[1m'

# –ú–∞—Å—Å–∏–≤—ã –ø–æ–¥—Å–µ—Ç–µ–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤–∞—è)
DEFAULT_SUBNETS=(
    "192.168.112.0/22"
)

# –ú–∞—Å—Å–∏–≤—ã –º–æ–¥—É–ª–µ–π –ø–æ –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏
declare -a CRITICAL_MODULES=(
    "ms17-010" "smbghost" "printnightmare" 
    "petitpotam" "zerologon"
)

declare -a HIGH_MODULES=(
    "spooler" "coerce_plus" "printerbug" "dfscoerce"
    "webdav" "sccm" "lsassy" "nanodump"
)

declare -a MEDIUM_MODULES=(
    "enum_trusts" "ldap-checker" "gpp_password" "laps"
    "adcs" "pre2k" "maq" "rdp" "vnc"
)

declare -a LOW_MODULES=(
    "enum_dns" "enum_ca" "get-desc-users" "user-desc"
    "subnets" "groupmembership" "find-computer"
)

declare -a AUTHENTICATED_MODULES=(
    "bloodhound" "lsassy" "nanodump" "dpapi" "handlekatz"
    "secrets" "sam" "ntds" "dcsync" "kerberoasting"
    "asreproast" "golden" "silver" "sid-history"
)

# ========================================================================
# –ú–ê–°–®–¢–ê–ë–ò–†–£–ï–ú–û–°–¢–¨ –ò RECOVERY
# ========================================================================

create_checkpoint() {
    local checkpoint_file="$OUTPUT_DIR/.checkpoint"
    local phase="$1"
    local current_subnet="$2"
    local current_module="$3"
    
    cat > "$checkpoint_file" << EOF
# AKUMA Scanner Checkpoint
# Created: $(date)
PHASE=$phase
CURRENT_SUBNET=$current_subnet
CURRENT_MODULE=$current_module
TIMESTAMP=$(date +%s)
EOF
    
    log "DEBUG" "Checkpoint created: Phase=$phase, Subnet=$current_subnet, Module=$current_module"
}

load_checkpoint() {
    local checkpoint_file="$OUTPUT_DIR/.checkpoint"
    
    if [[ -f "$checkpoint_file" ]] && [[ "$RESUME_SCAN" == "true" ]]; then
        log "INFO" "Loading checkpoint for resume..."
        # shellcheck source=/dev/null
        source "$checkpoint_file"
        
        log "INFO" "Resuming from: Phase=$PHASE, Subnet=$CURRENT_SUBNET, Module=$CURRENT_MODULE"
        return 0
    fi
    
    return 1
}

handle_scan_failure() {
    local failed_component="$1"
    local error_details="$2"
    local retry_count="${3:-1}"
    
    log "ERROR" "Scan failure in $failed_component: $error_details (Retry: $retry_count/$MAX_RETRY_ATTEMPTS)"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] FAILURE: $failed_component - $error_details (Retry: $retry_count)" >> "$OUTPUT_DIR/failures.log"
    
    if [[ "$AUTO_RETRY_FAILED" == "true" ]] && [[ $retry_count -lt $MAX_RETRY_ATTEMPTS ]]; then
        log "INFO" "Auto-retrying in 30 seconds..."
        sleep 30
        return 0  # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º
    else
        log "WARN" "Max retry attempts reached or auto-retry disabled. Skipping $failed_component"
        return 1  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º
    fi
}

# ========================================================================
# –£–¢–ò–õ–ò–¢–´ –ò –•–ï–õ–ü–ï–†–´
# ========================================================================

show_banner() {
    clear
    echo -e "${RED}"
    cat << "EOF"
    ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
    ‚ïë                      üî• AKUMA'S ADVANCED SCANNER üî•                          ‚ïë
    ‚ïë                    "Low-hanging fruits never tasted so good"                 ‚ïë
    ‚ïë                                                                              ‚ïë
    ‚ïë  [WARNING] –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –º–æ–∂–µ—Ç —Ä–∞–∑–æ—Ä–≤–∞—Ç—å —Ç–≤–æ—é –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–∞–∫ –º–æ–∫—Ä—É—é –≥–∞–∑–µ—Ç—É ‚ïë
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
EOF
    echo -e "${NC}"
    
    echo -e "${CYAN}[INFO]${NC} Initializing advanced penetration testing framework..."
    echo -e "${YELLOW}[WARNING]${NC} Use only on authorized networks. AKUMA –Ω–µ –Ω–µ—Å—ë—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞ —Ç–≤–æ–∏ –±–µ–∑—É–º–Ω—ã–µ –∏–¥–µ–∏!"
    echo ""
    sleep 2
}

log() {
    local level="$1"
    local message="$2"
    local timestamp="$(date '+%Y-%m-%d %H:%M:%S')"
    
    case "$level" in
        "INFO")  echo -e "${CYAN}[INFO]${NC}  [${timestamp}] ${message}" | tee -a "$LOG_FILE" ;;
        "WARN")  echo -e "${YELLOW}[WARN]${NC}  [${timestamp}] ${message}" | tee -a "$LOG_FILE" ;;
        "ERROR") echo -e "${RED}[ERROR]${NC} [${timestamp}] ${message}" | tee -a "$LOG_FILE" ;;
        "SUCCESS") echo -e "${GREEN}[SUCCESS]${NC} [${timestamp}] ${message}" | tee -a "$LOG_FILE" ;;
        "DEBUG") 
            if [[ "$DEBUG_MODE" == "true" ]]; then
                echo -e "${PURPLE}[DEBUG]${NC} [${timestamp}] ${message}" | tee -a "$LOG_FILE"
            fi
            ;;
        *) echo -e "[${timestamp}] ${message}" | tee -a "$LOG_FILE" ;;
    esac
}

check_dependencies() {
    log "INFO" "Checking dependencies..."
    
    local required_tools=("nmap" "netexec" "nxc")
    local missing_tools=()
    
    for tool in "${required_tools[@]}"; do
        if ! command -v "$tool" &>/dev/null; then
            missing_tools+=("$tool")
        fi
    done
    
    if [[ ${#missing_tools[@]} -gt 0 ]]; then
        log "ERROR" "Missing required tools: ${missing_tools[*]}"
        echo -e "${RED}[ERROR]${NC} Install missing tools first, you fucking noob!"
        exit 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é NetExec
    if command -v nxc &>/dev/null; then
        local nxc_version=$(nxc --version 2>/dev/null | head -n1 || echo "unknown")
        log "INFO" "NetExec version: $nxc_version"
    fi
    
    log "SUCCESS" "All dependencies are satisfied"
}

create_directories() {
    local dirs=(
        "$OUTPUT_DIR"
        "$OUTPUT_DIR/logs"
        "$OUTPUT_DIR/results"
        "$OUTPUT_DIR/raw_results"
        "$OUTPUT_DIR/reports"
        "$OUTPUT_DIR/evidence"
    )
    
    for dir in "${dirs[@]}"; do
        mkdir -p "$dir" || {
            log "ERROR" "Failed to create directory: $dir"
            exit 1
        }
    done
    
    log "INFO" "Created output directories in: $OUTPUT_DIR"
}

load_configuration() {
    if [[ -f "$CONFIG_FILE" ]]; then
        log "INFO" "Loading configuration from: $CONFIG_FILE"
        # shellcheck source=/dev/null
        source "$CONFIG_FILE"
    else
        log "WARN" "Configuration file not found, using defaults"
        create_default_config
    fi
}

create_default_config() {
    cat > "$CONFIG_FILE" << 'EOF'
# AKUMA's Advanced Scanner Configuration
# Modify these settings according to your needs

# Subnets to scan (space-separated)
SUBNETS=(
    "192.168.112.0/22"
)

# Parallel execution settings
MAX_PARALLEL=20
TIMEOUT_PER_HOST=300
NMAP_THREADS=100

# Authentication settings
AUTHENTICATED_SCAN=false
USERNAME="pentest"
PASSWORD="43CdfGjkCgbCjw"
DOMAIN=""

# Debug mode
DEBUG_MODE=false
EOF
    log "INFO" "Created default configuration file: $CONFIG_FILE"
}

# ========================================================================
# –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–ï –ò –û–ë–ù–ê–†–£–ñ–ï–ù–ò–ï
# ========================================================================

perform_port_scan() {
    local protocol="$1"
    local ports="$2"
    local output_file="$OUTPUT_DIR/${protocol}_hosts.txt"
    
    log "INFO" "Scanning for $protocol services on ports: $ports"
    
    # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã nmap –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    local scan_type="-sT"  # TCP connect scan (–Ω–µ —Ç—Ä–µ–±—É–µ—Ç root)
    if [[ $EUID -eq 0 ]]; then
        scan_type="-sS"       # SYN scan (–±—ã—Å—Ç—Ä–µ–µ, –Ω–æ –Ω—É–∂–µ–Ω root)
    fi
    
    local nmap_opts=(
        -Pn                    # –ù–µ –ø–∏–Ω–≥–æ–≤–∞—Ç—å —Ö–æ—Å—Ç—ã
        "$scan_type"           # –¢–∏–ø —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        -p"$ports"             # –ü–æ—Ä—Ç—ã –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        --open                 # –¢–æ–ª—å–∫–æ –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ—Ä—Ç—ã
        --min-rate 1000        # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å
        --max-retries 2        # –ú–∞–∫—Å–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫
        --max-rtt-timeout 1500ms
        --min-hostgroup 50     # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Ö–æ—Å—Ç–æ–≤
        --randomize-hosts      # –†–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏—è –ø–æ—Ä—è–¥–∫–∞
        -oG -                  # Grep-—Ñ–æ—Ä–º–∞—Ç –≤ stdout
    )
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Å–µ—Ç–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    local subnets=("${SUBNETS[@]}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º nmap –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º IP:–ø–æ—Ä—Ç –ø–∞—Ä—ã
    nmap "${nmap_opts[@]}" "${subnets[@]}" 2>/dev/null | \
        awk '/Host:.*Status: Up/{host=$2} 
             /Ports:.*open/{gsub(/\/tcp.*|,/, ""); 
                          split($2, ports, ","); 
                          for(i in ports) if(ports[i] ~ /^[0-9]+$/) print host":"ports[i]}' > "$output_file"
    
    local host_count=$(wc -l < "$output_file")
    log "SUCCESS" "Found $host_count $protocol hosts"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ—Ç—á—ë—Ç–∞
    if [[ $host_count -gt 0 ]]; then
        echo "# $protocol Hosts Discovery Report" > "$OUTPUT_DIR/raw_results/${protocol}_discovery.txt"
        echo "# Scan performed at: $(date)" >> "$OUTPUT_DIR/raw_results/${protocol}_discovery.txt"
        echo "# Ports scanned: $ports" >> "$OUTPUT_DIR/raw_results/${protocol}_discovery.txt"
        echo "# Total hosts found: $host_count" >> "$OUTPUT_DIR/raw_results/${protocol}_discovery.txt"
        echo "" >> "$OUTPUT_DIR/raw_results/${protocol}_discovery.txt"
        cat "$output_file" >> "$OUTPUT_DIR/raw_results/${protocol}_discovery.txt"
    fi
}

perform_service_discovery() {
    log "INFO" "Starting comprehensive service discovery"
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    perform_port_scan "smb" "445"
    perform_port_scan "ldap" "389,636,3268,3269"
    perform_port_scan "rdp" "3389"
    perform_port_scan "mssql" "1433,1434"
    perform_port_scan "winrm" "5985,5986"
    perform_port_scan "http" "80,443,8080,8443,9090"
    perform_port_scan "ftp" "21"
    perform_port_scan "ssh" "22"
    perform_port_scan "telnet" "23"
    perform_port_scan "dns" "53"
    
    log "SUCCESS" "Service discovery completed"
}

# ========================================================================
# –ú–û–î–£–õ–¨–ù–´–ï –ü–†–û–í–ï–†–ö–ò –£–Ø–ó–í–ò–ú–û–°–¢–ï–ô
# ========================================================================

run_vulnerability_check() {
    local host_port="$1"
    local protocol="$2"
    local module="$3"
    local priority="$4"
    local auth_required="$5"
    
    # –†–∞–∑–¥–µ–ª—è–µ–º IP –∏ –ø–æ—Ä—Ç
    local host="${host_port%%:*}"
    local port="${host_port##*:}"
    
    local log_file="$OUTPUT_DIR/logs/${protocol}_${module}_${host//\//_}_${port}.log"
    local result_file="$OUTPUT_DIR/results/${priority}_${protocol}_${module}.txt"
    
    log "DEBUG" "Testing $host_port with $protocol/$module (Priority: $priority)"
    
    # –°—Ç—Ä–æ–∏–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è NetExec
    local nxc_cmd=("nxc" "$protocol" "$host" "-M" "$module")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
    if [[ "$auth_required" == "true" ]] && [[ "$AUTHENTICATED_SCAN" == "true" ]]; then
        nxc_cmd+=("-u" "$USERNAME" "-p" "$PASSWORD")
        if [[ -n "$DOMAIN" ]]; then
            nxc_cmd+=("-d" "$DOMAIN")
        fi
    fi
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å —Ç–∞–π–º–∞—É—Ç–æ–º
    local exit_code=0
    log "DEBUG" "Running: ${nxc_cmd[*]}"
    
    timeout "${TIMEOUT_PER_HOST}s" "${nxc_cmd[@]}" > "$log_file" 2>&1
    exit_code=$?
    
    if [[ $exit_code -eq 0 ]]; then
        # –ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–∏–ª–∞—Å—å —É—Å–ø–µ—à–Ω–æ
        log "DEBUG" "Command completed successfully for $host/$module"
        analyze_module_results "$module" "$log_file" "$result_file" "$host" "$priority" || true
    elif [[ $exit_code -eq 124 ]]; then
        # Timeout
        log "WARN" "Timeout occurred for $host/$module"
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] TIMEOUT: $host - Module: $module" >> "${result_file}.errors"
    else
        # –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞
        log "WARN" "Command failed for $host/$module (exit code: $exit_code)"
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] ERROR: $host - Module: $module - Exit Code: $exit_code" >> "${result_file}.errors"
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–∞—Å—Ç–∏—á–Ω—ã–µ –ª–æ–≥–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        if [[ -f "$log_file" ]]; then
            echo "[$(date '+%Y-%m-%d %H:%M:%S')] Partial output from $host/$module:" >> "${result_file}.errors"
            head -10 "$log_file" >> "${result_file}.errors" 2>/dev/null || true
        fi
    fi
    
    # –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ –∏–ª–∏ –±–µ—Å–ø–æ–ª–µ–∑–Ω—ã–µ –ª–æ–≥–∏
    if [[ -f "$log_file" ]] && [[ $(stat -c%s "$log_file" 2>/dev/null || echo 0) -lt 100 ]]; then
        rm -f "$log_file"
    fi
}

analyze_module_results() {
    local module="$1"
    local log_file="$2" 
    local result_file="$3"
    local host="$4"
    local priority="$5"
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑—É –∑–Ω–∞–Ω–∏–π
    source "${SCRIPT_DIR}/vulnerability_knowledge_base.sh" 2>/dev/null || true
    
    local vulnerability_found=false
    local vulnerability_details=""
    local exploit_info=""
    
    case "$module" in
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏
        zerologon)
            if grep -qi "vulnerable\|exploitable\|zerologon.*success" "$log_file"; then
                vulnerability_details="ZEROLOGON VULNERABILITY DETECTED - CRITICAL RCE"
                vulnerability_found=true
            fi
            ;;
        ms17-010)
            if grep -qi "vulnerable\|ms17-010.*vulnerable\|eternalblue" "$log_file"; then
                vulnerability_details="MS17-010 (EternalBlue) - CRITICAL RCE"
                vulnerability_found=true
            fi
            ;;
        smbghost)
            if grep -qi "vulnerable\|potentially vulnerable\|smbghost.*vulnerable\|cve-2020-0796" "$log_file"; then
                vulnerability_details="SMBGhost (CVE-2020-0796) - CRITICAL RCE"
                vulnerability_found=true
            fi
            ;;
        printnightmare)
            if grep -qi "vulnerable\|potentially vulnerable\|printnightmare.*vulnerable\|cve-2021-34527" "$log_file"; then
                vulnerability_details="PrintNightmare - CRITICAL RCE/LPE"
                vulnerability_found=true
            fi
            ;;
        petitpotam)
            if grep -qi "vulnerable\|potentially vulnerable\|petitpotam.*vulnerable\|coercible" "$log_file"; then
                vulnerability_details="PetitPotam - NTLM Relay Attack Possible"
                vulnerability_found=true
            fi
            ;;
        
        # –í—ã—Å–æ–∫–æ–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏
        spooler|coerce_plus|printerbug|dfscoerce)
            if grep -qi "vulnerable\|coercible\|attack possible" "$log_file"; then
                vulnerability_details="Authentication Coercion Attack Possible - ${module^^}"
                vulnerability_found=true
            fi
            ;;
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏
        laps)
            if grep -qi "laps\|password\|readable" "$log_file"; then
                vulnerability_details="LAPS passwords may be readable"
                vulnerability_found=true
            fi
            ;;
        gpp_password)
            if grep -qi "password\|cpassword" "$log_file"; then
                vulnerability_details="GPP passwords found in SYSVOL"
                vulnerability_found=true
            fi
            ;;
        
        # –û–±—â–∏–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π
        *)
            if grep -qi "vulnerable\|exploitable\|password\|hash\|credential" "$log_file"; then
                vulnerability_details="$(grep -m1 -i 'vulnerable\|exploitable\|password\|hash\|credential' "$log_file" | head -c 200)"
                vulnerability_found=true
            elif grep -q '\[+\]' "$log_file"; then
                vulnerability_details="$(grep -m1 '\[+\]' "$log_file" | head -c 200)"
                vulnerability_found=true
            fi
            ;;
    esac
    
    if [[ "$vulnerability_found" == "true" ]]; then
        local timestamp="$(date '+%Y-%m-%d %H:%M:%S')"
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏
        if command -v get_exploit_summary &>/dev/null; then
            exploit_info=$(get_exploit_summary "$module")
        else
            exploit_info="PoC: Research required | FIX: Consult documentation"
        fi
        
        local result_line="[$timestamp] $host | $module | $vulnerability_details"
        local exploit_line="[EXPLOITATION] $exploit_info"
        
        echo "$result_line" >> "$result_file"
        echo "$exploit_line" >> "$result_file"
        echo "" >> "$result_file"
        
        # –î—É–±–ª–∏—Ä—É–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞—Ö–æ–¥–∫–∏ –≤ –æ–±—â–∏–π —Ñ–∞–π–ª
        if [[ "$priority" == "CRITICAL" ]]; then
            echo "$result_line" >> "$OUTPUT_DIR/CRITICAL_VULNERABILITIES.txt"
            log "ERROR" "CRITICAL VULNERABILITY: $host - $module - $vulnerability_details"
        fi
        
        log "SUCCESS" "Vulnerability found: $host/$module"
        return 0
    fi
    
    return 1
}

run_module_batch() {
    local priority="$1"
    local auth_required="$2"
    shift 2
    local modules=("$@")
    
    log "INFO" "Running $priority priority modules (Auth required: $auth_required)"
    
    for module in "${modules[@]}"; do
        log "INFO" "Testing module: $module"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ—Ç–æ–∫–æ–ª –ø–æ –º–æ–¥—É–ª—é
        local protocol="smb"
        case "$module" in
            ldap-checker|enum_trusts|adcs|pre2k) protocol="ldap" ;;
            rdp) protocol="rdp" ;;
            mssql_priv) protocol="mssql" ;;
            winrm*) protocol="winrm" ;;
            http*|web*) protocol="http" ;;
        esac
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ö–æ—Å—Ç—ã –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
        local hosts_file="$OUTPUT_DIR/${protocol}_hosts.txt"
        if [[ ! -f "$hosts_file" ]] || [[ ! -s "$hosts_file" ]]; then
            log "WARN" "No $protocol hosts found for module $module"
            continue
        fi
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Å –æ—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å—é
        local job_count=0
        while IFS= read -r host; do
            [[ -z "$host" ]] && continue
            
            # –û—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤—ã–π –∑–∞–ø—É—Å–∫
            (run_vulnerability_check "$host" "$protocol" "$module" "$priority" "$auth_required" 2>/dev/null || log "WARN" "Failed to test $host with $module") &
            
            ((job_count++))
            if ((job_count % MAX_PARALLEL == 0)); then
                wait # –ñ–¥—ë–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –±–∞—Ç—á–∞
            fi
        done < "$hosts_file"
        
        wait # –ñ–¥—ë–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞–Ω–∏–π –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –º–æ–¥—É–ª—è
        
        log "DEBUG" "Completed module $module (tested $job_count hosts)"
        
        # –°–æ–∑–¥–∞—ë–º –ø—É—Å—Ç—ã–µ —Ñ–∞–π–ª—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        touch "$OUTPUT_DIR/results/${priority}_${protocol}_${module}.txt"
    done
    
    log "SUCCESS" "$priority priority modules completed"
}

# ========================================================================
# –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–Ø
# ========================================================================

run_unauthenticated_scan() {
    log "INFO" "Starting unauthenticated vulnerability scan"
    
    # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1)
    run_module_batch "CRITICAL" false "${CRITICAL_MODULES[@]}"
    
    # –í—ã—Å–æ–∫–æ–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2)
    run_module_batch "HIGH" false "${HIGH_MODULES[@]}"
    
    # –°—Ä–µ–¥–Ω–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç 3)
    run_module_batch "MEDIUM" false "${MEDIUM_MODULES[@]}"
    
    # –ù–∏–∑–∫–æ–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç 4)
    run_module_batch "LOW" false "${LOW_MODULES[@]}"
    
    log "SUCCESS" "Unauthenticated scan completed"
}

run_authenticated_scan() {
    if [[ "$AUTHENTICATED_SCAN" != "true" ]]; then
        log "INFO" "Authenticated scan disabled, skipping"
        return
    fi
    
    log "INFO" "Starting authenticated vulnerability scan"
    log "INFO" "Using credentials: $USERNAME@$DOMAIN"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º credentials
    test_credentials || return 1
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–¥—É–ª–∏, —Ç—Ä–µ–±—É—é—â–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    run_module_batch "AUTH" true "${AUTHENTICATED_MODULES[@]}"
    
    log "SUCCESS" "Authenticated scan completed"
}

test_credentials() {
    log "INFO" "Testing provided credentials"
    
    local test_host
    if [[ -f "$OUTPUT_DIR/smb_hosts.txt" ]] && [[ -s "$OUTPUT_DIR/smb_hosts.txt" ]]; then
        test_host=$(head -n1 "$OUTPUT_DIR/smb_hosts.txt")
    else
        log "WARN" "No SMB hosts available for credential testing"
        return 1
    fi
    
    local test_cmd=("nxc" "smb" "$test_host" "-u" "$USERNAME" "-p" "$PASSWORD")
    if [[ -n "$DOMAIN" ]]; then
        test_cmd+=("-d" "$DOMAIN")
    fi
    
    if "${test_cmd[@]}" 2>/dev/null | grep -q "Pwn3d!\|[+]"; then
        log "SUCCESS" "Credentials validated successfully"
        return 0
    else
        log "ERROR" "Credential validation failed"
        return 1
    fi
}

# ========================================================================
# –ì–ï–ù–ï–†–ê–¶–ò–Ø –û–¢–ß–Å–¢–û–í
# ========================================================================

generate_vulnerability_summary() {
    local summary_file="$OUTPUT_DIR/reports/vulnerability_summary.txt"
    local poc_file="$OUTPUT_DIR/reports/exploitation_guide.txt"
    
    log "INFO" "Generating vulnerability summary and PoC guide"
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑—É –∑–Ω–∞–Ω–∏–π
    source "${SCRIPT_DIR}/vulnerability_knowledge_base.sh" 2>/dev/null || true
    
    cat > "$summary_file" << EOF
# AKUMA'S ADVANCED SCANNER - VULNERABILITY SUMMARY
# Generated: $(date)
# Scan directory: $OUTPUT_DIR
# Authentication: $([[ "$AUTHENTICATED_SCAN" == "true" ]] && echo "Enabled" || echo "Disabled")

===============================================================================
                            üî• EXECUTIVE SUMMARY üî•
===============================================================================

EOF

    # –ù–∞—á–∏–Ω–∞–µ–º PoC –≥–∞–π–¥
    cat > "$poc_file" << EOF
# AKUMA'S EXPLOITATION GUIDE & REMEDIATION MANUAL
# Generated: $(date)
# This guide contains detailed exploitation methods and remediation steps

===============================================================================
                        üî• CRITICAL VULNERABILITIES FOUND üî•
===============================================================================

EOF
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —É—è–∑–≤–∏–º–æ—Å—Ç–∏ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º
    local critical_count=0
    local high_count=0
    local medium_count=0
    local low_count=0
    local auth_count=0
    
    if [[ -f "$OUTPUT_DIR/CRITICAL_VULNERABILITIES.txt" ]]; then
        critical_count=$(wc -l < "$OUTPUT_DIR/CRITICAL_VULNERABILITIES.txt")
    fi
    
    for priority in HIGH MEDIUM LOW AUTH; do
        local count=0
        for file in "$OUTPUT_DIR/results/${priority}"_*.txt; do
            [[ -f "$file" ]] && ((count += $(wc -l < "$file")))
        done
        
        case "$priority" in
            HIGH) high_count=$count ;;
            MEDIUM) medium_count=$count ;;
            LOW) low_count=$count ;;
            AUTH) auth_count=$count ;;
        esac
    done
    
    cat >> "$summary_file" << EOF
üö® CRITICAL vulnerabilities found: $critical_count
‚ö†Ô∏è  HIGH priority findings: $high_count  
üìã MEDIUM priority findings: $medium_count
üìù LOW priority findings: $low_count
üîê AUTHENTICATED findings: $auth_count

TOTAL VULNERABILITIES: $((critical_count + high_count + medium_count + low_count + auth_count))

===============================================================================
                              üéØ HOST STATISTICS üéØ
===============================================================================

EOF
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ö–æ—Å—Ç–∞–º
    for service in smb ldap rdp mssql winrm http ftp ssh; do
        local hosts_file="$OUTPUT_DIR/${service}_hosts.txt"
        if [[ -f "$hosts_file" ]]; then
            local count=$(wc -l < "$hosts_file")
            echo "${service^^} hosts discovered: $count" >> "$summary_file"
        fi
    done
    
    echo "" >> "$summary_file"
    
    # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏ –¥–µ—Ç–∞–ª—å–Ω–æ
    if [[ -f "$OUTPUT_DIR/CRITICAL_VULNERABILITIES.txt" ]] && [[ -s "$OUTPUT_DIR/CRITICAL_VULNERABILITIES.txt" ]]; then
        cat >> "$summary_file" << EOF

===============================================================================
                        üî¥ CRITICAL VULNERABILITIES üî¥
===============================================================================

EOF
        cat "$OUTPUT_DIR/CRITICAL_VULNERABILITIES.txt" >> "$summary_file"
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ PoC –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π
        while IFS='|' read -r timestamp host module details; do
            # –û—á–∏—â–∞–µ–º —Å—Ç—Ä–æ–∫—É
            host=$(echo "$host" | tr -d ' ')
            module=$(echo "$module" | tr -d ' ')
            
            if [[ -n "$host" ]] && [[ -n "$module" ]]; then
                echo "" >> "$poc_file"
                echo "TARGET: $host" >> "$poc_file"
                echo "VULNERABILITY: $module" >> "$poc_file"
                echo "===============================================================================" >> "$poc_file"
                
                if command -v get_vulnerability_details &>/dev/null; then
                    get_vulnerability_details "$module" "$host" >> "$poc_file"
                else
                    echo "No detailed PoC available for $module" >> "$poc_file"
                fi
                
                echo "" >> "$poc_file"
                echo "===============================================================================" >> "$poc_file"
            fi
        done < "$OUTPUT_DIR/CRITICAL_VULNERABILITIES.txt"
    fi
    
    log "SUCCESS" "Vulnerability summary generated: $summary_file"
    log "SUCCESS" "Exploitation guide generated: $poc_file"
}

generate_detailed_report() {
    local report_file="$OUTPUT_DIR/reports/detailed_report.html"
    
    log "INFO" "Generating detailed HTML report"
    
    cat > "$report_file" << 'EOF'
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AKUMA's Advanced Scanner Report</title>
    <style>
        body { font-family: 'Courier New', monospace; background: #0a0a0a; color: #00ff00; margin: 0; padding: 20px; }
        .container { max-width: 1200px; margin: 0 auto; }
        .header { text-align: center; border: 2px solid #00ff00; padding: 20px; margin-bottom: 30px; }
        .section { margin-bottom: 30px; border: 1px solid #333; padding: 15px; }
        .critical { background: #330000; border-color: #ff0000; }
        .high { background: #331a00; border-color: #ff6600; }
        .medium { background: #333300; border-color: #ffff00; }
        .low { background: #003333; border-color: #00ffff; }
        h1 { color: #ff0000; text-shadow: 0 0 10px #ff0000; }
        h2 { color: #00ff00; border-bottom: 1px solid #00ff00; }
        .vuln-item { margin: 10px 0; padding: 10px; background: rgba(0,255,0,0.1); }
        .timestamp { color: #666; font-size: 0.8em; }
        pre { background: #111; padding: 10px; overflow-x: auto; }
        .stats { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px; }
        .stat-box { background: #111; padding: 15px; text-align: center; border: 1px solid #333; }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üî• AKUMA'S ADVANCED SCANNER REPORT üî•</h1>
            <p>"Your infrastructure just got PWNED by science"</p>
EOF

    echo "<p>Generated: $(date)</p>" >> "$report_file"
    echo "<p>Scan Directory: $OUTPUT_DIR</p>" >> "$report_file"
    echo "</div>" >> "$report_file"
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–∫—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
    for priority in CRITICAL HIGH MEDIUM LOW AUTH; do
        local class_name=$(echo "$priority" | tr '[:upper:]' '[:lower:]')
        
        cat >> "$report_file" << EOF
        <div class="section $class_name">
            <h2>$priority Priority Findings</h2>
EOF
        
        local found_results=false
        for file in "$OUTPUT_DIR/results/${priority}"_*.txt; do
            if [[ -f "$file" ]] && [[ -s "$file" ]]; then
                found_results=true
                local module_name=$(basename "$file" .txt | sed "s/${priority}_//")
                echo "<h3>$module_name</h3>" >> "$report_file"
                echo "<pre>" >> "$report_file"
                cat "$file" >> "$report_file"
                echo "</pre>" >> "$report_file"
            fi
        done
        
        if [[ "$found_results" == "false" ]]; then
            echo "<p>No $priority priority vulnerabilities found. Your systems might be less fucked than expected.</p>" >> "$report_file"
        fi
        
        echo "</div>" >> "$report_file"
    done
    
    cat >> "$report_file" << 'EOF'
    </div>
</body>
</html>
EOF
    
    log "SUCCESS" "Detailed HTML report generated: $report_file"
}

cleanup_results() {
    log "INFO" "Cleaning up empty result files"
    
    # –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ —Ñ–∞–π–ª—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    find "$OUTPUT_DIR/results" -type f -size 0 -delete 2>/dev/null || true
    find "$OUTPUT_DIR/logs" -type f -size -100c -delete 2>/dev/null || true
    
    # –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º –ª–æ–≥–∏ –µ—Å–ª–∏ –∏—Ö –º–Ω–æ–≥–æ
    local log_count=$(find "$OUTPUT_DIR/logs" -type f | wc -l)
    if [[ $log_count -gt 100 ]]; then
        log "INFO" "Archiving logs ($log_count files)"
        tar -czf "$OUTPUT_DIR/logs_archive_$(date +%H%M%S).tar.gz" -C "$OUTPUT_DIR" logs/ 2>/dev/null
        rm -rf "$OUTPUT_DIR/logs"
        mkdir -p "$OUTPUT_DIR/logs"
    fi
    
    log "SUCCESS" "Cleanup completed"
}

# ========================================================================
# –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø
# ========================================================================

main() {
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if [[ $EUID -eq 0 ]]; then
        echo "[WARN] Running as root. Hope you know what you're doing, comrade!"
    fi
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–Ω–Ω–µ—Ä
    show_banner
    
    # –°–æ–∑–¥–∞—ë–º —Ä–∞–±–æ—á–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–Ω–∞—á–∞–ª–∞
    create_directories
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    load_configuration
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    check_dependencies
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º checkpoint
    if load_checkpoint; then
        log "INFO" "Resuming previous scan from checkpoint"
    else
        log "INFO" "Starting new scan"
        create_checkpoint "INITIALIZATION" "" ""
    fi
    
    log "INFO" "Starting AKUMA's Advanced Low-Hanging Fruit Scanner v2.0"
    log "INFO" "Target subnets: ${SUBNETS[*]} (Total: ${#SUBNETS[@]})"
    log "INFO" "Max parallel jobs: $MAX_PARALLEL"
    log "INFO" "Timeout per host: ${TIMEOUT_PER_HOST}s"
    log "INFO" "Scalability mode: $(( ${#SUBNETS[@]} > 50 )) && echo "ENTERPRISE" || echo "STANDARD")"
    
    # –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤ —Å –æ—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å—é
    create_checkpoint "SERVICE_DISCOVERY" "" ""
    if ! perform_service_discovery; then
        handle_scan_failure "SERVICE_DISCOVERY" "Failed to discover services"
    fi
    
    # –£—è–∑–≤–∏–º–æ—Å—Ç–∏ –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    create_checkpoint "UNAUTHENTICATED_SCAN" "" ""
    if ! run_unauthenticated_scan; then
        handle_scan_failure "UNAUTHENTICATED_SCAN" "Failed to complete unauthenticated scan"
    fi
    
    # –£—è–∑–≤–∏–º–æ—Å—Ç–∏ —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)
    if [[ "$AUTHENTICATED_SCAN" == "true" ]]; then
        create_checkpoint "AUTHENTICATED_SCAN" "" ""
        if ! run_authenticated_scan; then
            handle_scan_failure "AUTHENTICATED_SCAN" "Failed to complete authenticated scan"
        fi
    fi
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–æ–≤
    create_checkpoint "REPORT_GENERATION" "" ""
    generate_vulnerability_summary
    generate_detailed_report
    
    # –û—á–∏—Å—Ç–∫–∞
    cleanup_results
    
    log "SUCCESS" "Scan completed successfully!"
    echo ""
    echo -e "${GREEN}${BOLD}===============================================================================${NC}"
    echo -e "${GREEN}${BOLD}                    üî• SCAN COMPLETED SUCCESSFULLY üî•${NC}"
    echo -e "${GREEN}${BOLD}===============================================================================${NC}"
    echo ""
    echo -e "${CYAN}Results directory:${NC} $OUTPUT_DIR"
    echo -e "${CYAN}Summary report:${NC} $OUTPUT_DIR/reports/vulnerability_summary.txt"
    echo -e "${CYAN}HTML report:${NC} $OUTPUT_DIR/reports/detailed_report.html"
    echo ""
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    if [[ -f "$OUTPUT_DIR/CRITICAL_VULNERABILITIES.txt" ]]; then
        local critical_count=$(wc -l < "$OUTPUT_DIR/CRITICAL_VULNERABILITIES.txt")
        if [[ $critical_count -gt 0 ]]; then
            echo -e "${RED}${BOLD}üö® $critical_count CRITICAL VULNERABILITIES FOUND! üö®${NC}"
            echo -e "${RED}Your infrastructure is more fucked than a Windows ME installation!${NC}"
        fi
    fi
    
    echo ""
    echo -e "${PURPLE}Remember: With great power comes great responsibility... and potentially jail time.${NC}"
    echo -e "${PURPLE}                          - AKUMA üî•${NC}"
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–π
trap 'echo -e "\n${RED}[INFO]${NC} Scan interrupted by user"; exit 130' INT TERM

# –û–ø—Ü–∏–∏ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
while [[ $# -gt 0 ]]; do
    case $1 in
        --auth)
            AUTHENTICATED_SCAN=true
            shift
            ;;
        --username)
            USERNAME="$2"
            shift 2
            ;;
        --password)
            PASSWORD="$2"
            shift 2
            ;;
        --domain)
            DOMAIN="$2"
            shift 2
            ;;
        --debug)
            DEBUG_MODE=true
            shift
            ;;
        --config)
            CONFIG_FILE="$2"
            shift 2
            ;;
        --help|-h)
            echo "AKUMA's Advanced Low-Hanging Fruit Scanner"
            echo ""
            echo "Usage: $0 [options]"
            echo ""
            echo "Options:"
            echo "  --auth              Enable authenticated scans"
            echo "  --username USER     Username for authentication"
            echo "  --password PASS     Password for authentication"
            echo "  --domain DOMAIN     Domain for authentication"
            echo "  --debug             Enable debug mode"
            echo "  --config FILE       Use custom config file"
            echo "  --help, -h          Show this help"
            echo ""
            echo "Example:"
            echo "  $0 --auth --username pentest --password 'MyP@ssw0rd' --domain CORP"
            exit 0
            ;;
        *)
            log "ERROR" "Unknown option: $1"
            exit 1
            ;;
    esac
done

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main "$@"
